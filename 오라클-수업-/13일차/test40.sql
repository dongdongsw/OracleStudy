-- 요구사항 분석 (테이블  => 데이터 수집(JSOUP, 공공데이터 포털)

/*
	data.go.kr / data seoul.go.kr
	1) 요구사항 분석
		= 벤치 마킹
		= 페이지 분석 => 필요한 데이터 추출
		---------------------------------
		개념적 설계 = 논리적 설계 = 물리적 설계
									| 데이터 크기 설정 => 테이블
						| 데이터형 설정, 키 종류
			| 데이터 추출
		------------------------------------------------------
		자료구조 / 알고리즘 / 디자인 패턴
		String / IO / Collection
		DAO
		DML / DLL
		git / 버전관리
		프론트 연동 
			ㄴ 프레임워크 :vue / react
			ㄴ DOM , 이벤트 / RestFul
		협업 / 배포
			= 프로젝트 / GIT, Docker / Docker-HUb / MiniKube / Jenkins
			= 리눅스 명령어
		=> 테스트 (JUNIT) : 단위 테스트
		=> 과정 => 개인 프로젝트 (완성)
		------------------------------------------------------------------------
		=> ER 모델 / 정규화 : 제약조건, 키의 종류 
		   -------   -----   1,2,3 => 한번에 완성 => ALTER
		   ER - 모델
		   ---------- 엔티티 / 속성 / 관계도
										| 외래키
								| 컬럼
						| 테이블
						
		-------------------------------------------------------------------------
		엔티티 (개체) : 사각형
		속성 : 타원형
		관계 : 마름모
		
		
		요구사항 
			한 학교는 학생과 과목, 수강의 정보를 관리
			한 학생은 여러개의 과목을 수강, 한과목은 여러 학생이 수강
			학생 학번 / 이름 / 학년 / 전공
			과목 과목 코드, 과목명, 학점
			수강시에는 성적을 기록
		엔티티
			1. 학생
			2. 과목
		관계
			수강 : N:M
		속성
			1. 학생 : 학번, 이름, 학년, 전공
			2. 과목 : 과목 코드 , 과목명, 학점
			
		=> ER
			학생 (학번(PK), 이름, 학년, 전공)
						|
						수강(학번(FK), 과목 코드(FK), 성적) =>  매핑 테이블
						|
				과목(과목 코드(PK), 과목명, 학점)
		
		===> 회원 (ID(PK), 이름 , 주소, 전화...)
				|
				찜 => N:M (ID(FK) , 맛집 번호(FK), 찜 번호(PK))
				|
				맛집(맛집 번호(PK), 업체명...)
		--------------------------------------------------------------------------
		정규화
			목적 : 이상현상이 있는 테이블을 분해해서  이상 현상을 방지하는 목적
			      --------- 수정 이상 / 삭제 이상
				  => 최대한 줄일 수 있는 방법 모색
				  
			장점 
				데이터베이스 변경시 이상현상을 제거
				새로운 데이터 추가할 경우에 => 일부만 변경이 가능
				응용 프로그램 변경시에 => 최소한의 영향
			단점
			
				테이블이 분해 => JOIN
				응답 속도가 늦다 => 반정규화를 사용하는 경우도 있다
				
				--------------------------------------------
				학번					이름					과목
				--------------------------------------------
				1					홍길동				자바
				--------------------------------------------
				2					심청이				오라클,HTML
				--------------------------------------------
				3					박문수				CSS,JSP,Spring 취소시에 => 수정이 어렵다
				--------------------------------------------
						1) 모든 컬럼은 원자값을 가지고 있다
									  ------
										단일 값
						2) 1 정규화 : 원자값 저장 유도
				--------------------------------------------
				학번					이름					과목
				--------------------------------------------
				1					홍길동				자바
				--------------------------------------------
				2					심청이				오라클
				--------------------------------------------
				2					심청이				HTML
				--------------------------------------------
				3					박문수				CSS
				--------------------------------------------
				3					박문수				JSP
				--------------------------------------------
				3					박문수				Spring
				--------------------------------------------	=> 이상현상
				
				=> 
				--------------
				학번		이름
				--------------
				1		홍길동
				2		심청이
				3 		박문수

				--------------
				학번		과목
				--------------
				1		자바
				2		HTML
				2 		오라클
				
				=> 컬럼의 원칙은 단일 값
					------------------- 원자성
				=> 무결성 원칙 => 2정규화 : 중복 제거
	
	2 정규화 : 1 정규화가 만족
				모든 컬럼은 부분적 종속을 제거
							------- 완전 함수 종속
							
		부부적 종속 : 기본키 중에 특정 컬럼에만 종속
		
		완전 함수 종속 : 기본키가 부분집합의 결정자가 되면 안된다
				----------------------------
				학번		과목		교수		성적
				----------------------------
				1		JSP		홍길동	100
				----------------------------
				2		Spring	박문수	90
				----------------------------
				3		CI/CD	이순신	80
				----------------------------
				4		VueJs	홍길동	70
													PRIMARY KEY(학번, 과목)
													
													-------------
														학번			====> 성적
														과목
													------------
				
														|
														교수
													
				
				--------------------		--------------------
				학번		과목		성적			 과목		교수
				--------------------		--------------------
				1		JSP		100
				--------------------
				2		Spring	90
				--------------------
				3		CI/CD	80
				--------------------

				--------			--------
					학번 = 성적			과목 = 교수
				--------			--------
			------------------------------------------------------------
			3정규화 : 1정규화, 2정규화가 완료
						=> 학번	============== 성적
							강좌 이름 ========= 강의실

			--------------------------------
			학번		과목		강의실		성적
			--------------------------------
			1		JSP		 A			3.5
			--------------------------------
			2		JSP		 A			4.0
			--------------------------------
			3		Spring 	 B			3.9
			--------------------------------
			3 		CI/CD	 C			4.2
			--------------------------------

			수강					강의실
			--------------		-------------
			학번	 과목 성적		과목		강의실
			--------------		-------------
	
			--------------		과목 => 강의실

			--------------		-------------
			학번 / 과목=> 성적

			---------------------------------------
			1 정규화 => 각 컬럼은 한개의 데이터만 저장이 가능
						---------------------	여러개인 경우(수정, 삭제)
								=> 원자값
								
			2 정규화 => 중복된 데이터 제거 = 테이블 분리
						기본키가 아닌 다른 키를 이용해서 제어 = 이행적 함수
								=> 부분적 함수 종속(복합키)

			3 정규화 => 한개의 기본키를 가지고 테이블을 제어
						=> 매핑 테이블
						=> JOIN이 많을 수 있다
						
			정규화
				수강(학번, 이름, 학과, 과목 코드, 과목명, 교수명, 성적)
				
				1. 문제점
					학번 / 과목이 중복될 수 있다
					
				2. 이상현상
					추가이상(INSERT) : 수강이 안된 학생은 등록이 불가능
					수정이상(UPDATE) : 학생의 이름변경(개명) => 학번을 찾아서 모든 이름 변경
					삭제이상(DELETE) : 수강 취소 => 모든 학번이 삭제
				
				-----------------------------------------------------------------------------
				
				함수 종속성 : 컬럼으로 제어 => 어디까지 제어
						학번 => 이름 / 학과 
						과목 코드 => 과목명 / 교수명
						(학번, 과목 코드) => 성적
				
				3. 정규화
					ㄴ 단일 값 설정(원자값) => 이미 완료
					---------------------------------- 1정규화
					
					ㄴ 종속
						ㄴ 기본키(복합키) => 제거
						ㄴ 학번 / 과목 코드 => PK => PRIMARY KEY(학번, 과목코드)
							1 100
							2 200
							3 300
							1 200
						ㄴ 이름 / 학과 => 학번으로 제어가 가능하게 => 테이블 분리
						
						학생(학번(PK), 이름 , 학과)	=> 사각형
									| 학번
						수강(학번(FK) , 과목 코드(PK), 성적) => 마름모
									| 과목코드
						과목(과목코드(PK), 과목명, 교수명) => 사각형

						=> 중복 제거 / PK/FK => 각 테이블간의 연결

				-----------------------------------------------------------------------------
				요구사항 ( 도서관 시스템)
				1. 도서관에는 회원들이 책을 빌려간다
				2. 회원은 회원번호 / 이름 / 전화번호 / 주소
				3. 책은 책 ID / 제목 / 저장 / 출판사
				4. 한 회원은 여러권의 책을 빌릴 수 있다
					한 책은 여러회원이 빌릴 수 있다(다른 시간)
				5. 대출시 일자 / 반납에정일 / 반납일
				-----------------------------------------------------------------------------
				회원 (회원번호 PK, 이름, 전화번호, 주소)
				도서 ( 책 ID PK, 제목, 저장, 출판사)
				대출 (회원번호(FK), 책ID(FK), 대출시 일자, 반납예정일, 반납일)
				
				회원 --- 대출 ---- 도서
				 |
			-----------
			|		  |
			
			
				회원 <--> 도서 : N:M
				

				요구사항
				= 병원은 의사, 환자, 진료기록을 관리한다.
				= 의사는 의사ID, 이름, 전문과목을 가진다
				= 환자는 환자ID, 이름, 생년월일, 전화번호를 가진다
				= 한 의사는 여러 환자를 진료할 수 있으며, 한 환자도 여러의사에게 진료받을 수 있다.
				= 진료 시 진료일자, 진료내용, 진단명을 기록한다.
				
				관계유형
					의사 -------- 진료 -------- 환자
							1:M  		N:1
				
				ERD 
					의사(의사ID(PK), 이름, 전문과목)
				
					환자(환자ID(PK), 이름, 생년월일, 전화번호)
				
					진료(의사ID(FK), 환자ID(FK), 진료일자, 진료 내용, 진단명)
				
				
				
				
				
				------------------------------------------------------------------------------------
				요구 사항
				
				= 쇼핑몰은 고객, 상품, 주문을 관리한다
				= 고객은 고객ID, 이름, 전화 번호, 주소를 가진다
				= 상품은 상품 ID, 상품명, 가격, 재고 수량을 가진다.
				= 고객은 여러 상품을 주문할 수 있고
				= 한상품도 여러 고객에게 주문될 수 있다
				= 주문시 주문일자, 수량을 기록한다

				관계유형
					고객 ------ 주문 ------ 상품
						  1:N		   N:1
						  
				ERD 
					고객(고객ID(PK), 이름, 전화 번호, 주소)
				
					상품(상품ID(PK), 상품명, 가격, 제고 수량)
			
					주문(고객ID(FK), 상품ID(FK), 주문일자, 수량)
				
				------------------------------------------------------------------------------------
				요구사항
				= 영화관은 고객과 상영영화를 관리한다
				= 고객은 고객번호, 이름, 전화번호를 가진다
				= 영화는 영화ID, 제목, 장르, 상영시간을 가진다.
				= 고객은 여러 영화를 예매할 수 있고
				= 각 예매마다 예매일시와 좌석번호를 기록한다
				
				관계유형
					고객 ----- 예매 ----- 영화
						 1:N		N:1
				
				ERD
					고객(고객 번호(PK), 이름, 전화번호)
				
					영화(영화ID(PK), 제목, 장르, 상영시간)
				
					예매(예매번호(PK), 고객번호(FK), 영화ID(FK), 예매일시, 좌석번호)
				
				------------------------------------------------------------------------------------












*/